// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, val;

        let val = 1;
        let twoToThe = Array.new(16);

        let twoToThe[0] = val;
        let i = 1;

        while (i < 16) {
            let val = val + val;
            let twoToThe[i] = val;
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = x * -1;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16) {
            if (Math.bit(y,j)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }

        return sum;
    }

    function boolean bit(int num, int index) {
        var int mask;
        var boolean result;

        let mask = twoToThe[index];
        let result = mask & num;

        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean negate;
        var int result;

        if (y = 0){
            do Sys.error(3);
        }

        let negate = false;
        if (x<0 & y>0) {
            let negate = true;
        }
        if (x>0 & y<0){
            let negate = true;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let result = Math.dividePositive(x,y);
        if (negate) {
            let result = -result;
        }

        return result;
    }

    function int dividePositive(int x, int y) {
            var int result;

            if ((y > x) | (y < 0)) {
                return 0;
            }

            let result = Math.dividePositive(x, y+y);
            if ((x-(result*2*y))<y){
                let result = result*2;
            } else {
                let result = ((result*2)+1);
            }

            return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, exp, square, y;

        if (x < 0){
            do Sys.error(4);
        }

        let y = 0;
        let j = 7;
        while (j > -1){
            let exp = twoToThe[j];
            let square = (y+exp) * (y+exp);
            if (((square < x) | (square = x)) & (square > 0)) {
                let y = y + exp;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
