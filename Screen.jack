// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        do Screen.setColor(true);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while (i < 8192) {
            do Memory.poke(16384 + i,0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod, i, mask, result;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)){
            do Sys.error(7);
        }

        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        let mod = x - ((x / 16 ) * 16);

        let i = 0;
        let mask = 1;
        while (i < mod){
            let mask = mask + mask; // multiply by 2
            let i = i + 1;
        }

        if (color) {
            let result = value | mask;
        } else {
            let mask = -1 - (mask);
            let result = value & mask;
        }

        do Memory.poke(16384 + address, result);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, diff, aInc, a, b;
        var int xStart, xEnd, yStart;

        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255)){
            do Sys.error(8);
        }
        if ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)){
            do Sys.error(8);
        }

        let a = 0;
        let b = 0;
        let diff = 0;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if (x1 = x2){
            let yStart = Math.min(y1, y2);
            while (~(b > dy)){
                do Screen.drawPixel(x1, yStart + b);
                let b = b + 1;
            }
            return;
        }

        if (y1 = y2) {
            let xStart = Math.min(x1, x2);
            while (~(a > dx)){
                do Screen.drawPixel(xStart + a, y1);
                let a = a + 1;
            }
            return;
        }

        let yStart = Math.max(y1, y2);
        if (yStart = y1) {
            let xStart = x1;
            let xEnd = x2;
        } else {
            let xStart = x2;
            let xEnd = x1;
        }

        if (xEnd < xStart ) {
           let aInc = -1;
        } else {
           let aInc = 1;
        }

        while ((~(a>dx)) & (~(b>dy))){
            do Screen.drawPixel(xStart+a,yStart-b);

            if (diff < 0) {
                let a = a + aInc;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, dy;

        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255)){
            do Sys.error(9);
        }
        if ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)){
            do Sys.error(9);
        }
        if ((x1>x2) | (y1 > y2)){
            do Sys.error(9);
        }

        let i = 0;
        let dy = y2 - y1;
        while (~(i > dy)){
            do Screen.drawLine(x1,(y1 + i),x2,(y1 + i));
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    var int dy, x1, x2;

        if ((x < (0 + r)) | (x > (511-r)) | (y < (0 + r)) | (y > (255 - r))){
            do Sys.error(12);
        }
        if (r > 181) {
            do Sys.error(13);
        }

        let dy = 0;
        while (~(dy > r)){
            let x1 = x - (Math.sqrt((r*r)-(dy*dy)));
            let x2 = x + (Math.sqrt((r*r)-(dy*dy)));
            do Screen.drawLine(x1,(y+dy),x2,(y+dy));
            let dy = dy + 1;
        }

        let dy = 0;
        while (~(dy > r)){
            let x1 = x - (Math.sqrt((r*r)-(dy*dy)));
            let x2 = x + (Math.sqrt((r*r)-(dy*dy)));
            do Screen.drawLine(x1,(y-dy),x2,(y-dy));
            let dy = dy + 1;
        }

        return;
    }
}
