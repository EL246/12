// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array bit_masks;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        do Screen.setColor(true);
        let screen = 16384;

        let bit_masks = Array.new(16);
        let bit_masks[0]  = 1;
        let bit_masks[1]  = 2;
        let bit_masks[2]  = 4;
        let bit_masks[3]  = 8;
        let bit_masks[4]  = 16;
        let bit_masks[5]  = 32;
        let bit_masks[6]  = 64;
        let bit_masks[7]  = 128;
        let bit_masks[8]  = 256;
        let bit_masks[9]  = 512;
        let bit_masks[10] = 1024;
        let bit_masks[11] = 2048;
        let bit_masks[12] = 4096;
        let bit_masks[13] = 8192;
        let bit_masks[14] = 16384;
        let bit_masks[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while (i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod, result;
/*
        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)){
            do Sys.error(7);
        }
*/
        let address = (32 * y) + (x / 16);
        let value = screen[address];
        let mod = x - ((x / 16 ) * 16);

        if (color) {
            let result = value | bit_masks[mod];
        } else {
            let result = value & (~bit_masks[mod]);
        }

        let screen[address] = result;

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, diff, aInc, a, b;
        var int xStart, xEnd, yStart;

/*
        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255)){
            do Sys.error(8);
        }
        if ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)){
            do Sys.error(8);
        }
*/
        let a = 0;
        let b = 0;
        let diff = 0;

        if (x1 = x2){
            do Screen.drawVerticalLine(x1,y1,y2);
            return;
        }

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1,x2,y1,1);
            return;
        }

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        let yStart = Math.max(y1, y2);
        if (yStart = y1) {
            let xStart = x1;
            let xEnd = x2;
        } else {
            let xStart = x2;
            let xEnd = x1;
        }

        if (xEnd < xStart ) {
           let aInc = -1;
        } else {
           let aInc = 1;
        }

        while ((~(a>dx)) & (~(b>dy))){
            do Screen.drawPixel(xStart+a,yStart-b);

            if (diff < 0) {
                let a = a + aInc;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y, int repeat) {
        var int xStart, xEnd, a, dx;
        var int xStartmod16, xEndmod16;
        var int startAddr, endAddr;
        var int i;
        var int s, e;

        let i = 0;
        let dx = Math.abs(x2 - x1);
        let xStart = Math.min(x1, x2);
        let xEnd = Math.max(x1,x2);

        let xStartmod16 = xStart & 15;
        let xEndmod16 = xEnd & 15;

        let startAddr = (y*32) + (xStart/16); //startAddr
        let endAddr = (y*32) + (xEnd/16) + (xEndmod16=0); // endAddr

        let s = startAddr;
        let e = endAddr;

        while (i < repeat){
            let s = startAddr + (32*i);
            let e = endAddr + (32*i);
            if (s = e) {
                do Screen.drawHorizLineByPixel(xStart, xEnd, y);
            }
            else {

                if (~(xStartmod16 = 0)){
                    do Screen.drawHorizLineByPixel(xStart, xStart + 16 - xStartmod16, y);
                    let s = s + 1;
                }

                if (~(xEndmod16 = 0)){
                    do Screen.drawHorizLineByPixel(xEnd - xEndmod16, xEnd, y);
                    let e = e - 1;
                }

                while (~(s > e)){
                    let screen[s] = color;
                    let s = s + 1;
                }
            }

            let i = i + 1;
            let y = y + 1;
        }
        return;
    }

    function void drawHorizLineByPixel(int x1, int x2, int y) {
        while (~(x1>x2)) {
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2){
        var int yStart, b, dy;

        let dy = Math.abs(y2 - y1);
        let yStart = Math.min(y1, y2);
        while (~(b > dy)){
            do Screen.drawPixel(x, yStart + b);
            let b = b + 1;
        }
        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, dy;

/*
        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255)){
            do Sys.error(9);
        }
        if ((x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)){
            do Sys.error(9);
        }
        if ((x1>x2) | (y1 > y2)){
            do Sys.error(9);
        }
*/

        let dy = y2 - y1;
        do Screen.drawHorizontalLine(x1,x2,y1,dy+1);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    var int dy, x1, x2;

/*
        if ((x < (0 + r)) | (x > (511-r)) | (y < (0 + r)) | (y > (255 - r))){
            do Sys.error(12);
        }
        if (r > 181) {
            do Sys.error(13);
        }
*/
       let dy = 0;
        while (~(dy > r)){
            let x1 = x - (Math.sqrt((r*r)-(dy*dy)));
            let x2 = x + (Math.sqrt((r*r)-(dy*dy)));
            do Screen.drawHorizontalLine(x1,x2,(y+dy),1);
            let dy = dy + 1;
        }

        let dy = 0;
        while (~(dy > r)){
            let x1 = x - (Math.sqrt((r*r)-(dy*dy)));
            let x2 = x + (Math.sqrt((r*r)-(dy*dy)));
            do Screen.drawHorizontalLine(x1,x2,(y-dy),1);
            let dy = dy + 1;
        }

        return;
    }
}
